name: Build MicroPython for RP2040 and Pico W

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 * * 0'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout MicroPython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev git pkg-config \
            libssl-dev python3 python3-pip python3-venv
        sudo apt-get install -y gcc-arm-none-eabi

    - name: Checkout Custom Libraries
      run: git clone https://github.com/rsc1975/micropython-hcsr04.git ./custom_libs/

    - name: Copy Libraries
      run: |
        ls ./custom_libs
        cp ./custom_libs/*.py micropython/ports/rp2/modules/
    
    - name: Build MicroPython for RP2040
      run: |
        cd micropython
        make -C mpy-cross
        cd ports/rp2
        make submodules
        make
        
    - name: Build MicroPython for Pico W
      run: |
        cd micropython
        make -C mpy-cross
        cd ports/rp2
        make BOARD=RPI_PICO_W submodules  # Clonar submódulos específicos para Pico W
        make BOARD=RPI_PICO_W clean  # Limpiar compilaciones anteriores
        make BOARD=RPI_PICO_W  # Compilar para Pico W

    - name: Move .uf2 files to artifacts
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/rp2/build-RPI_PICO/*.uf2 ./artifacts/RP2040.uf2
        cp micropython/ports/rp2/build-RPI_PICO_W/*.uf2 ./artifacts/RP2040W.uf2  # Copiar firmware a artifacts

    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
        
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython for RP2 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          ## How to Flash the Firmware
          ### Windows, Linux:
          1. Download the .uf2 file from the release.
          2. Press and hold the BOOT button on the RP2040 and press RESET button or connect it to your computer via USB.
          3. Release the button. The RP2040  will appear as a removable drive.
          4. Drag and drop the .uf2 file onto the drive.
          5. The RP2040 will reboot and run MicroPython.
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    #- name: Create Release
     # uses: marvinpinto/action-automatic-releases@latest
      #with:
       # repo_token: "${{ secrets.GITHUB_TOKEN }}"
        #prerelease: false
        #automatic_release_tag: ${{ env.TAG_NAME }}  # Usa el nombre del tag generado
        #title: "MicroPython for RP2 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        #files: ./artifacts/*

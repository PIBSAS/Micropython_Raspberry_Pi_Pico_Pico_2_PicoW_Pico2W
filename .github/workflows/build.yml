name: Build MicroPython

permissions:
  contents: write

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Este evento se activará cuando se haga push de un tag que comience con 'v'
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout MicroPython
        run: git clone --recurse-submodules https://github.com/micropython/micropython.git

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev git pkg-config \
              libssl-dev python3 python3-pip python3-venv wget flex bison gperf \
              ccache dfu-util libusb-1.0-0 cmake ninja-build gcc-arm-none-eabi

      - name: Checkout Custom Libraries
        run: git clone https://github.com/peterhinch/micropython-fourier.git ./custom_libs

      - name: Copy Libraries
        run: |
          cp -r ./custom_libs/* micropython/lib/

      - name: Checkout ESP32-S3 Board Configurations
        run: git clone https://github.com/PIBSAS/ESP32-S3-WROOM-1-N16R8.git

      - name: Copy ESP32-S3 Board Configurations
        run: |
          cd ESP32-S3-WROOM-1-N16R8
          mv GENERIC_S3_N16R8 ESP32_GENERIC_S3_N16R8
          cp -r ESP32_GENERIC_S3_N16R8 ./../micropython/ports/esp32/boards/

      - name: Setup ESP-IDF
        run: |
          mkdir -p $HOME/esp
          cd $HOME/esp
          git clone -b v5.2.2 --recursive https://github.com/espressif/esp-idf.git
          cd esp-idf/tools
          python3 idf_tools.py install cmake
          cd ..
          ./install.sh esp32s3
          echo "$HOME/esp/esp-idf/tools" >> $GITHUB_PATH  # Añadir herramientas ESP-IDF al PATH
     
      - name: Export ESP directory path
        run: echo "ESP_DIR=$HOME/esp" >> $GITHUB_ENV  # Exportar la ruta de ESP_DIR

      - name: Setup Python Environment for ESP-IDF
        run: |
          cd $ESP_DIR/esp-idf  # Asegurarse de estar en el directorio correcto
          python3 -m venv esp-idf-venv
          source esp-idf-venv/bin/activate
          pip install -r tools/requirements/requirements.core.txt
          
  build_rp2040:
    runs-on: ubuntu-latest
    needs: setup  # Este trabajo depende del trabajo de configuración

    steps:
      - name: Checkout MicroPython
        run: git clone --recurse-submodules https://github.com/micropython/micropython.git

      - name: Install Pico SDK dependencies
        run: |
          sudo apt-get install -y gcc-arm-none-eabi
          
      - name: Build MicroPython for RP2040
        run: |
          cd micropython
          make -C mpy-cross
          cd ports/rp2
          make submodules
          make

      - name: Move .uf2 files to artifacts
        run: |
          mkdir -p ./artifacts
          cp micropython/ports/rp2/build-RPI_PICO/*.uf2 ./artifacts/RP2040.uf2

  build_pico_w:
    runs-on: ubuntu-latest
    needs: setup  # Este trabajo depende del trabajo de configuración

    steps:
      - name: Checkout MicroPython
        run: git clone --recurse-submodules https://github.com/micropython/micropython.git

      - name: Install Pico SDK dependencies
        run: |
          sudo apt-get install -y gcc-arm-none-eabi
          
      - name: Build MicroPython for Pico W
        run: |
          cd micropython
          make -C mpy-cross
          cd ports/rp2
          make BOARD=RPI_PICO_W submodules  # Clonar submódulos específicos para Pico W
          make BOARD=RPI_PICO_W clean  # Limpiar compilaciones anteriores
          make BOARD=RPI_PICO_W  # Compilar para Pico W

      - name: Move .uf2 files to artifacts
        run: |
          mkdir -p ./artifacts
          cp micropython/ports/rp2/build-RPI_PICO_W/*.uf2 ./artifacts/RP2040W.uf2

  build_esp32_s3:
    runs-on: ubuntu-latest
    needs: setup  # Este trabajo depende del trabajo de configuración

    steps:
      - name: Checkout MicroPython
        run: git clone --recurse-submodules https://github.com/micropython/micropython.git

      - name: Build MicroPython for ESP32-S3
        run: |
          cd micropython
          make -C mpy-cross
          export IDF_PATH="$ESP_DIR/esp-idf"  # Ruta del ESP-IDF
          export IDF_TARGET=esp32s3
          cd ports/esp32/
          make submodules
          make BOARD=ESP32_GENERIC_S3_N16R8 submodules
          make BOARD=ESP32_GENERIC_S3_N16R8
      
      - name: Move .uf2 files to artifacts
        run: |
          mkdir -p ./artifacts
          cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/bootloader/bootloader.bin ./artifacts/
          cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/partition_table/partition-table.bin ./artifacts/
          cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/micropython.bin ./artifacts/ESP32_micropython.bin

  generate_release:
    runs-on: ubuntu-latest
    needs: [build_rp2040, build_pico_w, build_esp32_s3]  # Este trabajo depende de las compilaciones

    steps:
      - name: Generate Tag
        id: tag
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: ${{ env.TAG_NAME }}  # Usa el nombre del tag generado
          title: "Release for version ${{ env.TAG_NAME }}"
          files: ./artifacts/*
